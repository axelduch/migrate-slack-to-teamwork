Using client-oauth2 for oAuth2 client authentication, I picked it amongst several ones candidates were:
node-oauth -> Seemed mature, had a lot of contributions, last active was nov 2015, on the other hand it seemed not so robust concerning oAuth2
simple-oauth2 -> Seemed okay but I was not sure I could rely on it, or if it was robust enough
client-oauth2 -> Straight forward api, chainable requests

EDIT:
    I remembered of passport for authentication, and found a slack strategy. It is the simplest and most robust api I have found so far.


Using express for routing and serving static files
Using request-promise (provided by bluebird) to handle external api calls


Using gulp
    to build client side js with webpack (commonjs style)
    to build css with less

Breaking responsibilities into different parts
    server
        authentication
            against slack api
            against teamwork api
            site index is dynamic and should redirect to slack auth scenario until user is authenticated

        api
            serve slack user list
            create teamwork users

        serve static contents


    client
        api
            2 separate internal apis which call slack / teamwork apis
            a bridge fetching input data from slack api and writing output data to teamwork api

        knockout responsibility is broken further into different parts:
            isolate view "bindings" which will define data for the views
            a view model utility which collects different "bindings" to build the final view model
            components which display data and allow modifications
