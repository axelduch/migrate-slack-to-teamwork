Scenario:

I decided to ask for the Slack authentication and then Teamwork api's.
Slack credentials are remembered and Teamwork's are asked every time you access the url.
Once you are correctly logged in, the server gets all slack users that you did not already import (uniqueness by email address).
If no users are provided (you either have no contacts on slack, or you already imported all of them), you are offered to be redirected to Teamwork Chat.
Once you selected the users you want to import (all are selected by default), you can click on one of the import buttons.
Once imported you are offered to be redirected to Teamwork Chat.

It lacks of error feedback, it is silent event though users not being imported will be still available for edition, and could be an improvement to be done.

I chose material design principles for the UI.

Technical choices:

Using client-oauth2 for oAuth2 client authentication, I picked it amongst several ones candidates were:
node-oauth -> Seemed mature, had a lot of contributions, last active was nov 2015, on the other hand it seemed not so robust concerning oAuth2
simple-oauth2 -> Seemed okay but I was not sure I could rely on it, or if it was robust enough
client-oauth2 -> Straight forward api, chainable requests

EDIT:
    I remembered of passport for authentication, and found a slack strategy. It is the simplest and most robust api I have found so far.


Using express for routing and serving static files
Using request-promise (provided by bluebird) to handle external api calls


Using gulp
    to build client side js with webpack (commonjs style)
    to build css with less

Breaking responsibilities into different parts
    server
        authentication
            against slack api
            against teamwork api
            site index is dynamic and should redirect to slack auth scenario until user is authenticated

        api
            serve slack user list
            create teamwork users

        serve static contents


    client
        api
            2 separate internal apis which call slack / teamwork apis
            a bridge fetching input data from slack api and writing output data to teamwork api

        knockout responsibility is broken further into different parts:
            isolate view "bindings" which will define data for the views
            a view model utility which collects different "bindings" to build the final view model
            components which display data and allow modifications


Also I used unit tests (mocha with chai), but there were very few manipulations that could be easily isolated, so I just tested the part that needed to filter users already imported.
